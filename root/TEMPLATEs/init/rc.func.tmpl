#!/opt/bin/bash

ACTION="$1"
CALLER="$2"

ansi_red="\033[1;31m"
ansi_white="\033[1;37m"
ansi_green="\033[1;32m"
ansi_yellow="\033[1;33m"
ansi_std="\033[m"

start() {
    unset LOOP

    {
        [ "$CRITICAL" != "yes" ]
        [ "$CALLER" = "cron" ]
    } && return 7
    [ "$ENABLED" != "yes" ] && return 8
    echo -e -n "$ansi_white Starting $DESC... $ansi_std"
    if [ -n "$(pidof "$PROC")" ]; then
        echo -e "$ansi_yellow already running. $ansi_std"
        return 0
    fi

    case "$PROC" in
        'dnscrypt-proxy')
            /opt/etc/init.d/S09dnscrypt-proxy2 restart
            ;;
        'vpnclient1' | 'vpnclient2' | 'vpnclient3' | 'vpnserver1' | 'vpnserver2' | 'vpnserver3')
            service "$PROC" restart >/dev/null
            ;;
        'dnsmasq' | 'cstats' | 'rstats' | 'smbd')
            service "$PROC" restart >/dev/null
            ;;
        *)
            $PRECMD >/dev/null 2>&1
            eval "$PREARGS $PROC $ARGS"
            ;;
    esac

    COUNTER=0
    LIMIT=20

    while [ -z "$(pidof "$PROC")" ] && [ "$COUNTER" -le "$LIMIT" ]; do
        sleep 1
        COUNTER=$((COUNTER + 1))
    done
    $POSTCMD >/dev/null 2>&1

    if [ -z "$(pidof "$PROC")" ]; then
        echo -e "$ansi_red failed. $ansi_std"
        logger "Failed to start $DESC from $CALLER."
        return 255
    else
        echo -e "$ansi_green done. $ansi_std"
        logger "Started $DESC from $CALLER."
        return 0
    fi
}

stop() {
    unset LOOP

    case "$ACTION" in
        stop | restart)
            echo -e -n "$ansi_white Shutting down $PROC... $ansi_std"

            case "$PROC" in
                'dnscrypt-proxy')
                    /opt/etc/init.d/S09dnscrypt-proxy2 "$ACTION"
                    ;;
                'vpnclient1' | 'vpnclient2' | 'vpnclient3' | 'vpnserver1' | 'vpnserver2' | 'vpnserver3')
                    service "$PROC" "$ACTION" >/dev/null
                    ;;
                'dnsmasq' | 'cstats' | 'rstats' | 'smbd')
                    service "$PROC" "$ACTION" >/dev/null
                    ;;
                *) killall "$PROC" >/dev/null ;;
            esac

            COUNTER=0
            LIMIT=10
            while [ -n "$(pidof "$PROC")" ] && [ "$COUNTER" -le "$LIMIT" ]; do
                sleep 1
                COUNTER=$((COUNTER + 1))
            done
            ;;
        kill)
            echo -e -n "$ansi_white Killing $PROC... $ansi_std"
            killall -9 "$PROC" >/dev/null
            ;;
    esac

    if [ -n "$(pidof "$PROC")" ]; then
        echo -e "$ansi_red failed. $ansi_std"
        return 255
    else
        echo -e "$ansi_green done. $ansi_std"
        return 0
    fi
}

check() {
    echo -e -n "$ansi_white Checking $DESC... "
    if [ -n "$(pidof "$PROC")" ]; then
        echo -e "$ansi_green alive. $ansi_std"
        return 0
    else
        echo -e "$ansi_red dead. $ansi_std"
        return 1
    fi
}

reconfigure() {
    SIGNAL=SIGHUP
    echo -e "$ansi_white Sending $SIGNAL to $PROC... $ansi_std"
    killall -$SIGNAL "$PROC" >/dev/null
}

export PROCS
for PROC in $PROCS; do
    case "$ACTION" in
        start)
            start
            ;;
        stop | kill)
            check && stop
            ;;
        restart)
            check >/dev/null && stop
            start
            ;;
        check)
            check
            ;;
        reconfigure)
            reconfigure
            ;;
        *)
            echo -e "$ansi_white Usage: $0 (start|stop|restart|check|kill|reconfigure)$ansi_std"
            exit 1
            ;;
    esac
done
